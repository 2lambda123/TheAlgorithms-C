#include<stdio.h>
// Merges two subarrays of arr[]. 
// First subarray is arr[l..m] 
// Second subarray is arr[m+1..r] 
void merge(int arr[],int arrdep[], int l, int m, int r) 
{ 
    int i, j, k; 
    int n1 = m - l + 1; 
    int n2 =  r - m; 
  
    /* create temp arrays */
    int L[n1], R[n2]; 
    int Ldep[n1],Rdep[n2];
  
    /* Copy data to temp arrays L[] and R[] */
    for (i = 0; i < n1; i++)
    { 
        L[i] = arr[l + i];
       Ldep[i]=arrdep[l+i];	
    }
    for (j = 0; j < n2; j++)
    {
	    R[j] = arr[m + 1+ j];
        Rdep[j]=arrdep[m+1+j];	
    }
  
    /* Merge the temp arrays back into arr[l..r]*/
    i = 0; // Initial index of first subarray 
    j = 0; // Initial index of second subarray 
    k = l; // Initial index of merged subarray 
    while (i < n1 && j < n2) 
    { 
        if (L[i] <= R[j]) 
        { 
            arr[k] = L[i];
	   arrdep[k]=Ldep[i]; 
            i++; 
        } 
        else
        { 
            arr[k] = R[j];
	   arrdep[k]= Rdep[j];
            j++; 
        } 
        k++; 
    } 
  
    /* Copy the remaining elements of L[], if there 
       are any */
    while (i < n1) 
    { 
        arr[k] = L[i];
       arrdep[k]=Ldep[i];	
        i++; 
        k++; 
    } 
  
    /* Copy the remaining elements of R[], if there 
       are any */
    while (j < n2) 
    { 
        arr[k] = R[j]; 
	arrdep[k]=Rdep[j];
        j++; 
        k++; 
    } 
} 
  
/* l is for left index and r is right index of the 
   sub-array of arr to be sorted */
void mergeSort(int arr[],int arrdep[], int l, int r) 
{ 
    if (l < r) 
    { 
        // Same as (l+r)/2, but avoids overflow for 
        // large l and h 
        int m = l+(r-l)/2; 
  
        // Sort first and second halves 
        mergeSort(arr,arrdep, l, m); 
        mergeSort(arr,arrdep, m+1, r); 
  
        merge(arr,arrdep, l, m, r); 
    } 
} 
int main()
{
	int a1[]={1,3,2,9,5};
	int a2[]={2,0,9,4,6};
	mergeSort(a1,a2,0,4);
	for(int i=0;i<5;i++)
	{
		printf("%d \n",a2[i]);
	}
}
